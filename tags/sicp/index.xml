<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SICP on fyshXplore</title>
        <link>http://fyshxfish.github.io/tags/sicp/</link>
        <description>Recent content in SICP on fyshXplore</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sat, 07 Sep 2024 23:18:00 +0800</lastBuildDate><atom:link href="http://fyshxfish.github.io/tags/sicp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Message Passing Perspective on Bool - SICP ¬ß 2.4.3 | Generic | Data and Functions</title>
        <link>http://fyshxfish.github.io/p/message-passing-perspective-on-bool-sicp-2.4.3-generic-data-and-functions/</link>
        <pubDate>Sat, 07 Sep 2024 23:18:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/p/message-passing-perspective-on-bool-sicp-2.4.3-generic-data-and-functions/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;&lt;a href=&#34;#introduction&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;SICP ¬ß 2.4.3 describes a generic system implemented using table lookup (type √ó operation two-dimensional table), where concrete functions are hidden under abstractions like &amp;ldquo;generic function + Selector&amp;rdquo;. What would it look like if we put concrete functions under &amp;ldquo;data + Selector&amp;rdquo; abstractions? This article presents a Boolean implementation that conforms to this abstraction (called Message Passing in SICP). The importance of &lt;strong&gt;data&lt;/strong&gt; and &lt;strong&gt;functions&lt;/strong&gt; in programming is self-evident. Let&amp;rsquo;s explore three perspectives on the possible relationships between data and functions: Message Passing ‚Ü¶ letting data carry its own functions; &lt;code&gt;$&lt;/code&gt; in Haskell ‚Ü¶ transforming data into functions; Algebraic data types in Haskell ‚Ü¶ constructing data using functions.&lt;/p&gt;
&lt;h2 id=&#34;generic-functions-intelligent-operations&#34;&gt;&lt;a href=&#34;#generic-functions-intelligent-operations&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Generic Functions: Intelligent Operations
&lt;/h2&gt;&lt;p&gt;In section 2.4.3, the author builds a generic system. What is generics? It&amp;rsquo;s a form of abstraction. For several types that share certain &lt;strong&gt;characteristics&lt;/strong&gt;, if we can write a function for one type based on this &lt;strong&gt;characteristic&lt;/strong&gt;, we want to extend this function to other types with the same characteristic. For example: for two &lt;code&gt;Int&lt;/code&gt; values, I can calculate their maximum (&lt;code&gt;max Int Int&lt;/code&gt;) because &lt;code&gt;Int&lt;/code&gt; is &lt;strong&gt;Orderable&lt;/strong&gt;, meaning the &lt;code&gt;Int&lt;/code&gt; type provides implementations of comparison functions like &lt;code&gt;&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;&lt;/code&gt; / etc. For other &lt;strong&gt;orderable&lt;/strong&gt; types (those that provide comparison function implementations), we want to extend &lt;code&gt;max&lt;/code&gt; to these types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Ord&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;max&lt;/span&gt; x y &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;gt;=&lt;/span&gt; y &lt;span style=&#34;color:#cf222e&#34;&gt;then&lt;/span&gt; x &lt;span style=&#34;color:#cf222e&#34;&gt;else&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We abstract the &lt;strong&gt;orderable&lt;/strong&gt; characteristic into the &lt;code&gt;Ord&lt;/code&gt; typeclass, and the &lt;code&gt;max&lt;/code&gt; function can work with any member type of typeclass.&lt;/p&gt;
&lt;p&gt;When we apply the &lt;code&gt;max&lt;/code&gt; function to a specific &lt;code&gt;Ord&lt;/code&gt; class type, the compiler helps us &lt;u&gt;find&lt;/u&gt; the concrete implementation of &lt;code&gt;&amp;gt;=&lt;/code&gt; for that type.&lt;/p&gt;
&lt;p&gt;So how to &lt;u&gt;find&lt;/u&gt; it? One answer is: table lookup. When I need to execute &lt;code&gt;max&lt;/code&gt; (operation) on &lt;code&gt;Float&lt;/code&gt; (type), I can find the function (the non-generic concrete implementation of &lt;code&gt;max&lt;/code&gt; for &lt;code&gt;Float&lt;/code&gt;) corresponding to (&lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;) in the Cartesian product of type √ó operation.&lt;/p&gt;
&lt;img src=&#34;generic_table.png&#34; alt=&#34;generic_table&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;p&gt;SICP Page 252: Generics breaks down the type √ó operation table row by row, with each generic function corresponding to one row. ‚ú®&lt;/p&gt;
&lt;img src=&#34;table_rows.png&#34; alt=&#34;table_rows&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;h2 id=&#34;data-and-functions&#34;&gt;&lt;a href=&#34;#data-and-functions&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Data and Functions
&lt;/h2&gt;&lt;h3 id=&#34;intelligent-operation-what-if-intelligent-data-objects&#34;&gt;&lt;a href=&#34;#intelligent-operation-what-if-intelligent-data-objects&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Intelligent Operation? WHAT IF Intelligent Data Objects?
&lt;/h3&gt;&lt;p&gt;In generic functions mentioned in the previous section, data exists as an object to be operated on. Data&amp;rsquo;s job is to &lt;strong&gt;be&lt;/strong&gt; acted upon by functions. Our generics target functions (operations). In our expectation, we want functions to be &amp;ldquo;smart&amp;rdquo;. For example, &lt;code&gt;max :: (Ord a) =&amp;gt; a -&amp;gt; a -&amp;gt; a&lt;/code&gt; is smart - it can &amp;ldquo;automatically&amp;rdquo; transform into the corresponding non-generic concrete implementation &lt;code&gt;max :: Int -&amp;gt; Int -&amp;gt; Int&lt;/code&gt; for its specific type. Data just needs to wait to be acted upon.&lt;/p&gt;
&lt;p&gt;&lt;font color=&#34;#d60e81&#34;&gt;ùêñùê°ùêöùê≠ ùê¢ùêü&lt;/font&gt;: Instead of letting generic functions find concrete implementations for data ‚Üí &lt;u&gt;let data find concrete implementations for functions&lt;/u&gt;? From the perspective of decomposing the type √ó operation table, what if we break this table into columns, letting certain form of data (corresponding to generic operations, let&amp;rsquo;s call it generic? data) represent a column?&lt;/p&gt;
&lt;img src=&#34;table_cols.png&#34; alt=&#34;table_cols&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;p&gt;This was already presented in SICP 2.1.3 when discussing compound data extraction, and was mentioned in my &lt;a class=&#34;link&#34; href=&#34;https://fyshxfish.github.io/p/huffman-%E6%A0%91%E7%9A%84-haskell-%E5%AE%9E%E7%8E%B0-sicp-2.3.4-%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%93%E6%9E%84%E4%B8%8E%E8%A7%A3%E6%9E%84/#%e4%b8%80%e8%87%b4%e6%80%a7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;previous blog post&lt;/a&gt;. The focus in SICP 2.1.3 was on operations on compound data itself (extracting fields): to ensure consistency before and after list element access, we provide the list as a procedure that accepts parameters and returns corresponding list elements based on those parameters.&lt;/p&gt;
&lt;p&gt;Here we care about how data behaves in programs - how data interacts with functions and other data. We want &lt;strong&gt;data to carry its own interaction methods&lt;/strong&gt; rather than being static entities that can only be acted upon by other functions. Based on this idea, let&amp;rsquo;s try to write a Boolean that follows this behavioral specification.&lt;/p&gt;
&lt;h3 id=&#34;boolean-carrying-functions&#34;&gt;&lt;a href=&#34;#boolean-carrying-functions&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Boolean Carrying Functions
&lt;/h3&gt;&lt;p&gt;First, let&amp;rsquo;s present a similar type √ó operation two-dimensional table. Since we&amp;rsquo;re doing simple modeling, we&amp;rsquo;ll only consider two operations - AND (&lt;code&gt;logic_and&lt;/code&gt;) and OR (&lt;code&gt;logic_or&lt;/code&gt;):&lt;/p&gt;
&lt;img src=&#34;tf_table.png&#34; alt=&#34;tf_table&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;p&gt;Similar to generic functions representing rows, we write &amp;ldquo;data&amp;rdquo; that can represent columns. The identifiers for &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; columns are &lt;code&gt;tru&lt;/code&gt; and &lt;code&gt;fls&lt;/code&gt; respectively. How to make data carry functions? One answer is to make the data itself a function that can accept parameters, using parameters to extract the functions carried by the data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;tru&lt;/span&gt;                                   &lt;span style=&#34;color:#57606a&#34;&gt;; (define tru (lambda ...))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;lambda &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;cond &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;eq? &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#032f62&#34;&gt;&amp;#39;and&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;tru_logic_and&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;eq? &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#032f62&#34;&gt;&amp;#39;or&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#953800&#34;&gt;tru_logic_or&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;fls&lt;/span&gt;                                   &lt;span style=&#34;color:#57606a&#34;&gt;; (define fls (lambda ...))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;lambda &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;cond &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;eq? &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#032f62&#34;&gt;&amp;#39;and&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;fls_logic_and&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;eq? &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#032f62&#34;&gt;&amp;#39;or&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#953800&#34;&gt;fls_logic_or&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The functions corresponding to &lt;code&gt;lambda - cond&lt;/code&gt; (curried logical AND and OR) are implemented as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scm&#34; data-lang=&#34;scm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;tru_logic_and&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;eq? &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;tru&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;tru&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;fls&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;    &lt;span style=&#34;color:#57606a&#34;&gt;; 1 AND x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;tru_logic_or&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;tru&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;                           &lt;span style=&#34;color:#57606a&#34;&gt;; 1 OR _ = 1        &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;fls_logic_and&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;fls&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;                          &lt;span style=&#34;color:#57606a&#34;&gt;; 0 AND _ = 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;fls_logic_or&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;eq? &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;tru&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;tru&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;fls&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;      &lt;span style=&#34;color:#57606a&#34;&gt;; 0 OR x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checking &lt;code&gt;tru&lt;/code&gt; &lt;code&gt;fls&lt;/code&gt; in REPL: unsurprisingly both are compound procedures&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 ]=&amp;gt; tru

;Value: #[compound-procedure 13 tru]

1 ]=&amp;gt; fls

;Value: #[compound-procedure 12 fls]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s do a simple test:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 ]=&amp;gt; ((tru &amp;#39;and) fls)

;Value: #[compound-procedure 12 fls]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What did we do here? First, &lt;code&gt;tru&lt;/code&gt; is a &lt;code&gt;lambda&lt;/code&gt; expression that accepts symbol parameters. &lt;code&gt;(tru &#39;and)&lt;/code&gt; returns &lt;code&gt;tru_logic_and&lt;/code&gt; &amp;ndash; a curried logical AND (that is, logical AND with &lt;code&gt;TRUE&lt;/code&gt; already passed in), then we apply &lt;code&gt;tru_logic_and&lt;/code&gt; to &lt;code&gt;fls&lt;/code&gt;, and the final return value is the compound procedure &lt;code&gt;fls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an illustration:&lt;/p&gt;
&lt;img src=&#34;msg_pasing_tru.png&#34; alt=&#34;message passing `tru`&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;p&gt;For longer expressions: if we ignore some parentheses, it looks like infix logical expressions&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 ]=&amp;gt; ((((fls &amp;#39;or) tru) &amp;#39;and) fls)      ; ((0 or 1) and 0)

;Value: #[compound-procedure 12 fls]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you prefer prefix calls, we can add a small wrapper:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scm&#34; data-lang=&#34;scm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;logic&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Testing &lt;code&gt;logic&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 ]=&amp;gt; (logic &amp;#39;and tru fls)

;Value: #[compound-procedure 12 fls]

1 ]=&amp;gt; (logic &amp;#39;or (logic &amp;#39;and fls fls) tru)      ; (or (and 0 0) 1)

;Value: #[compound-procedure 13 tru]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;-message-passing-another-perspective-on-data&#34;&gt;&lt;a href=&#34;#-message-passing-another-perspective-on-data&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;‚Üí Message Passing: Another Perspective on Data
&lt;/h3&gt;&lt;p&gt;This style of building Boolean is called Message Passing: data is an entity that receives operation names (messages). For example: &lt;code&gt;tru&lt;/code&gt; can receive messages like &lt;code&gt;&#39;and&lt;/code&gt; / &lt;code&gt;&#39;or&lt;/code&gt; and return corresponding curried functions for our subsequent use. From this perspective, the data itself is as important as &lt;strong&gt;the methods carried by the data&lt;/strong&gt;, which is also a manifestation of &amp;ldquo;data as program&amp;rdquo;. You might notice a hint of object-oriented flavor here - objects are essentially &amp;ldquo;state + methods&amp;rdquo;, and here data contains &amp;ldquo;state + functions&amp;rdquo;, though the state here is immutable.&lt;/p&gt;
&lt;h3 id=&#34;-in-haskell&#34;&gt;&lt;a href=&#34;#-in-haskell&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;code&gt;$&lt;/code&gt; in Haskell
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;$&lt;/code&gt; is an infix function with the following type signature and precedence. Its purpose is to change expression evaluation order, and one objective result is that using &lt;code&gt;$&lt;/code&gt; reduces the number of parentheses in code:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ghci&amp;gt; :i ($)
($) :: (a -&amp;gt; b) -&amp;gt; a -&amp;gt; b       -- Defined in &amp;#39;GHC.Base&amp;#39;
infixr 0 $
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Applying &lt;code&gt;$&lt;/code&gt; (curried) to a &lt;strong&gt;value&lt;/strong&gt; returns a &lt;strong&gt;function&lt;/strong&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ghci&amp;gt; x = 5 :: Int
ghci&amp;gt; :t ($ x)
($ x) :: (Int -&amp;gt; b) -&amp;gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One way to understand this is: &lt;code&gt;($ x)&lt;/code&gt; transforms &lt;code&gt;x&lt;/code&gt; from static data into data waiting to be acted upon by function &lt;code&gt;Int -&amp;gt; b&lt;/code&gt; &lt;span style=&#34;color: #888888; font-size: 0.85em;&#34;&gt;(which is a function from the type signature)&lt;/span&gt;. Based on this understanding, we can write code like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ghci&amp;gt; map ($ 5) [(* 2), (+ 10), (^ 3)]
[10,15,125]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;algebraic-data-types-in-haskell&#34;&gt;&lt;a href=&#34;#algebraic-data-types-in-haskell&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Algebraic Data Types in Haskell
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s the classic recursive definition of binary trees using algebraic data types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Empty&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; a &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Empty&lt;/code&gt; and &lt;code&gt;Node&lt;/code&gt; are value constructors for &lt;code&gt;Tree a&lt;/code&gt;. Value constructors are &lt;strong&gt;functions&lt;/strong&gt; that return &lt;strong&gt;values&lt;/strong&gt; of some type. &lt;code&gt;Empty&lt;/code&gt; is a nullary constructor, while &lt;code&gt;Node&lt;/code&gt; takes three &lt;strong&gt;value&lt;/strong&gt; parameters: &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;Tree a&lt;/code&gt;, and &lt;code&gt;Tree a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tree a&lt;/code&gt; is a type constructor. Type constructors are functions that return specific &lt;strong&gt;types&lt;/strong&gt;. &lt;code&gt;Tree a&lt;/code&gt; takes one type parameter &lt;code&gt;a&lt;/code&gt; and returns the corresponding concrete &lt;code&gt;Tree&lt;/code&gt; type. For example, &lt;code&gt;Tree Int&lt;/code&gt; and &lt;code&gt;Tree Char&lt;/code&gt; are &lt;code&gt;Tree&lt;/code&gt; types with node data types of &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Char&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;This shows Haskell&amp;rsquo;s elegant consistency in language design - there&amp;rsquo;s no special generic syntax, just functions throughout.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Huffman Trees in Haskell | Structure and Destructure of Compound Data</title>
        <link>http://fyshxfish.github.io/p/huffman-trees-in-haskell-structure-and-destructure-of-compound-data/</link>
        <pubDate>Mon, 02 Sep 2024 01:53:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/p/huffman-trees-in-haskell-structure-and-destructure-of-compound-data/</guid>
        <description>&lt;p&gt;Code Here: &lt;a class=&#34;link&#34; href=&#34;https://github.com/fyshxfish/sicp-playground/blob/main/sicp-note/ch2/ch2-3-huffman_tree.hs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Huffman Tree in Haskell&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskell-implementation-of-huffman-trees&#34;&gt;&lt;a href=&#34;#haskell-implementation-of-huffman-trees&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Haskell Implementation of Huffman Trees
&lt;/h2&gt;&lt;img src=&#34;huffmantree_more_padding.png&#34; alt=&#34;huffmantree diagram&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;h3 id=&#34;data-abstraction&#34;&gt;&lt;a href=&#34;#data-abstraction&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Data Abstraction
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Weight&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Symbol&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;D&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;F&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;G&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;H&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Show&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Empty&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; a &lt;span style=&#34;color:#cf222e&#34;&gt;Weight&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Weight&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#cf222e&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;symbol--weight--leaf&#34;&gt;&lt;a href=&#34;#symbol--weight--leaf&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;code&gt;Symbol&lt;/code&gt; + &lt;code&gt;Weight&lt;/code&gt; ‚Üí &lt;code&gt;Leaf&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;We encode symbols (&lt;code&gt;Symbol&lt;/code&gt; / generic &lt;code&gt;a&lt;/code&gt;) based on their frequency/weight (&lt;code&gt;Weight&lt;/code&gt;), combining these two pieces of information into a &lt;code&gt;Leaf&lt;/code&gt; abstraction, corresponding to SICP&amp;rsquo;s (&lt;code&gt;define (make-leaf symbol weight) (list &#39;leaf symbol weight)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Generic types and constraints: There are no type constraints on symbols. The weight constraint is that &lt;code&gt;Weight&lt;/code&gt; belongs to the &lt;code&gt;Ord&lt;/code&gt; typeclass because weights need to be comparable. Here we directly use &lt;code&gt;Int&lt;/code&gt; as the weight type instead of making it generic.&lt;/p&gt;
&lt;h4 id=&#34;recursive-definition-of--huffmantree&#34;&gt;&lt;a href=&#34;#recursive-definition-of--huffmantree&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Recursive Definition of  &lt;code&gt;HuffmanTree&lt;/code&gt;
&lt;/h4&gt;&lt;p&gt;Contains three constructors: &lt;code&gt;Empty&lt;/code&gt;, &lt;code&gt;Leaf&lt;/code&gt;, and &lt;code&gt;Node&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Empty&lt;/code&gt;: Empty tree&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Leaf&lt;/code&gt;: Leaf node containing symbol &lt;code&gt;a&lt;/code&gt; and weight &lt;code&gt;Weight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node&lt;/code&gt;: Branch node containing left and right subtrees (&lt;code&gt;HuffmanTree a&lt;/code&gt;), union of subtree symbols &lt;code&gt;[a]&lt;/code&gt;, and total subtree weight &lt;code&gt;Weight&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-the-huffman-tree&#34;&gt;&lt;a href=&#34;#building-the-huffman-tree&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Building the Huffman Tree
&lt;/h3&gt;&lt;h4 id=&#34;getting-weight&#34;&gt;&lt;a href=&#34;#getting-weight&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Getting Weight
&lt;/h4&gt;&lt;p&gt;Get the weight of &lt;code&gt;Leaf&lt;/code&gt;Ôºå&lt;code&gt;Node&lt;/code&gt; through pattern matching.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getWeight&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Weight&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getWeight&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; w&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; w 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getWeight&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; w&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; w
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight-paragraph-grey&#34;&gt;For simplicity, we haven&#39;t considered the `Empty` tree case. For better safety, we should write `getWeight :: HuffmanTree a -&gt; Maybe Weight`, returning `Nothing` when matching `Empty`.&lt;/div&gt;&lt;br&gt;
&lt;h4 id=&#34;list-organization&#34;&gt;&lt;a href=&#34;#list-organization&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;List Organization
&lt;/h4&gt;&lt;p&gt;The starting point for building a Huffman tree is an ordered list of leaves. During construction, the &lt;code&gt;[HuffmanTree a]&lt;/code&gt; list needs to maintain order. The functions in this section aim to organize an unordered list into an ordered one.&lt;/p&gt;
&lt;p&gt;¬ª &lt;code&gt;adjoinLeaf&lt;/code&gt;: Insert a HuffmanTree a into an existing ordered &lt;code&gt;[HuffmanTree a]&lt;/code&gt; based on weight (ascending order).&lt;/p&gt;
&lt;p&gt;¬ª &lt;code&gt;initLeafs&lt;/code&gt;: Organize an existing unordered leaf list into an ordered leaf list.&lt;/p&gt;
&lt;p&gt;¬ª &lt;code&gt;moveFirstNode&lt;/code&gt;: During Huffman Tree construction, the Merge operation combines the two HuffmanTree (&lt;code&gt;Leaf&lt;/code&gt; / &lt;code&gt;Node&lt;/code&gt;) with smallest weights‚Äîthe first two elements in the list‚Äîinto a new Node. This function helps reposition the newly generated Node after merging.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;adjoinTree&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a  &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;adjoinTree&lt;/span&gt; t &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;t&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;adjoinTree&lt;/span&gt; t &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;t&amp;#39;&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;ts&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; w &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;&lt;/span&gt; w&amp;#39;   &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; t&amp;#39;&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; ts 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; t&amp;#39;&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;adjoinTree t ts&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#cf222e&#34;&gt;where&lt;/span&gt; w  &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; getWeight t 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          w&amp;#39; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; getWeight t&amp;#39; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;initLeafs&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;     &lt;span style=&#34;color:#57606a&#34;&gt;-- I know pl(leaf) = leaves, btw. ^^   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;initLeafs&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;initLeafs&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;p&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;ps&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; adjoinLeaf p &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;initLeafs ps&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;moveFirstNode&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;moveFirstNode&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;ts&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; adjoinLeaf t ts 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;tree-construction&#34;&gt;&lt;a href=&#34;#tree-construction&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Tree Construction
&lt;/h4&gt;&lt;p&gt;¬ª &lt;code&gt;makeNode&lt;/code&gt;: Combines two &lt;code&gt;HuffmanTree&lt;/code&gt;s into a &lt;code&gt;Node&lt;/code&gt;.
¬ª &lt;code&gt;constructHuffTree&lt;/code&gt;: Bottom-up tree construction, building the Huffman Tree using tail recursion.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recursive step: Merge the first two elements in the current list into a parent &lt;code&gt;Node&lt;/code&gt; using &lt;code&gt;makeNode&lt;/code&gt;, move the parent node to get a new ordered list, and recursively process the new list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Base case: List contains only one element, which is the root node.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¬ª &lt;code&gt;initAndConstructHuffTree&lt;/code&gt;: Final encapsulation, using Point-less composition to combine leaf list initialization initLeafs and tree construction constructHuffTree.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;makeNode&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;makeNode&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s1 w1&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s2 w2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s1 w1&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s2 w2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;s1&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; s2&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;w1 &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; w2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;makeNode&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s w&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l r ss w&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s w&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l r ss w&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;ss&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;w &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; w&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;makeNode&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l r ss w&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s w&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l r ss w&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s w&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;ss &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;s&lt;span style=&#34;color:#1f2328&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;w &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; w&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;makeNode&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l1 r1 ss1 w1&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l2 r2 ss2 w2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l1 r1 ss1 w1&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; l2 r2 ss2 w2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;ss1 &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; ss2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;w1 &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; w2&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Empty&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;t&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; t      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;y&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;ts&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; constructHuffTree &lt;span style=&#34;color:#0550ae&#34;&gt;$&lt;/span&gt; moveFirstNode &lt;span style=&#34;color:#0550ae&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;makeNode x y&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;initAndConstructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;initAndConstructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; constructHuffTree &lt;span style=&#34;color:#0550ae&#34;&gt;.&lt;/span&gt; initLeafs 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;huffman-tree-encoding-and-decoding&#34;&gt;&lt;a href=&#34;#huffman-tree-encoding-and-decoding&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Huffman Tree Encoding and Decoding
&lt;/h3&gt;&lt;h4 id=&#34;getting-symbol-encoding&#34;&gt;&lt;a href=&#34;#getting-symbol-encoding&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Getting Symbol Encoding
&lt;/h4&gt;&lt;p&gt;The process of building a Huffman tree is the encoding process itself. A node&amp;rsquo;s position in the tree represents its encoding. Here we present the encoding in binary form.&lt;/p&gt;
&lt;p&gt;Encoding representation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bit&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;L&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;R&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Show&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Bit&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;L&lt;/code&gt; corresponds to binary &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt; corresponds to binary &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Getting the encoding involves traversing and recording the Huffman tree:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[(&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s1 &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s2 &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[(&lt;/span&gt;s1&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;]),&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;s2&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s&amp;#39; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; node &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[(&lt;/span&gt;s&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; getCode&amp;#39; node &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; node &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s&amp;#39; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;  getCode&amp;#39; node &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[(&lt;/span&gt;s&amp;#39;&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; nodel noder  &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; rec &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; getCode&amp;#39; nodel &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt; getCode&amp;#39; noder &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;rec&lt;span style=&#34;color:#0550ae&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[(&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getCode&lt;/span&gt; t  &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; getCode&amp;#39; t &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¬ª &lt;code&gt;getCode&#39;&lt;/code&gt;: Traverse the Huffman tree Recursively&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recursive step: For a node, match left and right subtrees, continue recursive traversal for non-leaf nodes (&lt;code&gt;node&lt;/code&gt;), recording branch directions in &lt;code&gt;rec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Base case: When matching a &lt;code&gt;Leaf&lt;/code&gt; in left/right subtree, it indicates reaching a &lt;code&gt;Symbol&lt;/code&gt;. At this point, &lt;code&gt;rec ++ [L]&lt;/code&gt; / &lt;code&gt;rec ++ [R]&lt;/code&gt; is the encoding for that &lt;code&gt;Symbol&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pattern matching explanation: Reviewing the Huffman tree construction process, we always merge two nodes into their parent node, so there&amp;rsquo;s no case where a subtree is &lt;code&gt;Empty&lt;/code&gt;. Therefore, every branch node&amp;rsquo;s pattern is &lt;code&gt;Node lhs rhs _ _&lt;/code&gt;. Also, we use &lt;code&gt;Leaf&lt;/code&gt; as the base case without recursing on it, which is why we only pattern match different forms of the &lt;code&gt;Node&lt;/code&gt; constructor and put the &lt;code&gt;Leaf&lt;/code&gt; recursive base cases first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¬ª &lt;code&gt;getCode&lt;/code&gt;ÔºöWraps &lt;code&gt;getCode&#39;&lt;/code&gt;, giving &lt;code&gt;rec&lt;/code&gt; an initial value of &lt;code&gt;[]&lt;/code&gt;, meaning no path record at the Huffman tree&amp;rsquo;s root node.&lt;/p&gt;
&lt;h4 id=&#34;decoding&#34;&gt;&lt;a href=&#34;#decoding&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Decoding
&lt;/h4&gt;&lt;p&gt;Basic approach: Move through the tree based on &lt;code&gt;Bit&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; - move to left subtree, &lt;code&gt;R&lt;/code&gt; - move to right subtree. When reaching a &lt;code&gt;Leaf&lt;/code&gt; subtree, one character is decoded. Then return to the root node to continue decoding the next character until the &lt;code&gt;Bit&lt;/code&gt; list is empty.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;-- decode one symbol&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decodeOne&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decodeOne&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L:&lt;/span&gt;bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decodeOne&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;R:&lt;/span&gt;bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decodeOne&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; node &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L:&lt;/span&gt;bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; decodeOne node bs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decodeOne&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; node &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;R:&lt;/span&gt;bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; decodeOne node bs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;-- decode from scratch &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decode&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decode&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decode&lt;/span&gt; t bs &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#cf222e&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; remainBits&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; decodeOne t bs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#cf222e&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; decode t remainBits
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¬ª &lt;code&gt;decodeOne&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Base case: When the current &lt;code&gt;Bit&lt;/code&gt;&amp;rsquo;s corresponding subtree is a &lt;code&gt;Leaf&lt;/code&gt;, one character is decoded. Return that character and the remaining &lt;code&gt;Bit&lt;/code&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recursive step: When the current &lt;code&gt;Bit&lt;/code&gt;&amp;rsquo;s corresponding subtree is a &lt;code&gt;Node&lt;/code&gt;, continue recursive decoding on that &lt;code&gt;Node&lt;/code&gt; until reaching the base case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¬ª &lt;code&gt;decode&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Base case: Empty &lt;code&gt;Bit&lt;/code&gt; list means decoding is complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recursive step: For non-empty &lt;code&gt;Bit&lt;/code&gt; list, pass the root node and current &lt;code&gt;Bit&lt;/code&gt; list to &lt;code&gt;decodeOne&lt;/code&gt; for single character decoding. After one character is decoded, continue decoding remaining &lt;code&gt;Bit&lt;/code&gt;s from the root node until the &lt;code&gt;Bit&lt;/code&gt; list is empty.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¬ª How to return to root node:&lt;/p&gt;
&lt;p&gt;Initially, the function signature I wrote was &lt;code&gt;decode :: HuffmanTree a -&amp;gt; HuffmanTree a -&amp;gt; Bits -&amp;gt; [a]&lt;/code&gt;, with two &lt;code&gt;HuffmanTree&lt;/code&gt; parameters representing the original root node and current node. Implementation was roughly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decode&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bits&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;decode&amp;#39;&lt;/span&gt; originT &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Leaf&lt;/span&gt; s &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;L:&lt;/span&gt;bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;decode&amp;#39; originT originT bs&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;--snip--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This didn&amp;rsquo;t feel quite right since the &lt;code&gt;originT&lt;/code&gt; parameter never changed during recursion, so I slightly modified the recursive structure to write the above &lt;code&gt;decode&lt;/code&gt; and &lt;code&gt;decodeOne&lt;/code&gt;. SICP uses closures to remember the initial root node.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;structure-and-destructure-of-compound-data&#34;&gt;&lt;a href=&#34;#structure-and-destructure-of-compound-data&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Structure and Destructure of Compound Data
&lt;/h2&gt;&lt;h3 id=&#34;sicp-data-but-functions&#34;&gt;&lt;a href=&#34;#sicp-data-but-functions&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;SICP: Data, but Functions?
&lt;/h3&gt;&lt;h4 id=&#34;consistency&#34;&gt;&lt;a href=&#34;#consistency&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Consistency
&lt;/h4&gt;&lt;p&gt;We want to use &lt;strong&gt;structured&lt;/strong&gt; data‚Äîrather than scattered variables‚Äîas program components, thus we have compound data like &lt;code&gt;struct&lt;/code&gt; / &lt;code&gt;class&lt;/code&gt;. The question then becomes how to extract the fields used to construct compound data. One thing extraction needs to ensure is consistency of fields before and after extraction. This is mainly the compiler&amp;rsquo;s work, but if we want to demonstrate this at the source code level, how can we do it? SICP 2.1.3 (Page 124) does it this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;cons &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;dispatch&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;cond &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Argument not 0 or 1: CONS&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#953800&#34;&gt;dispatch&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;car &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;cdr &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Exercise 2.4 (Page 125) has an elegant implementation using lambda:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;cons &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;lambda &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;car &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;lambda &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ÔºàFor Pure Lambda Calculus implementation of this example, see the &lt;a class=&#34;link&#34; href=&#34;#lambda-calculus---pair-abstraction&#34; &gt;last section of this article&lt;/a&gt;.Ôºâ&lt;/p&gt;
&lt;p&gt;A key point this chapter of SICP emphasizes is: The boundary between data and procedures isn&amp;rsquo;t so clear-cut. The above two programs demonstrate this precisely: the list constructor returns a procedure that provides an interface to access the &lt;strong&gt;elements composing the list&lt;/strong&gt;, which enables the definition of &lt;code&gt;car&lt;/code&gt; / &lt;code&gt;cdr&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;data-combination-and-extraction--program-construction-abstraction-layer&#34;&gt;&lt;a href=&#34;#data-combination-and-extraction--program-construction-abstraction-layer&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Data Combination and Extraction ‚Üí Program Construction: Abstraction Layer
&lt;/h4&gt;&lt;p&gt;Combination in LISP (&lt;strong&gt;LIS&lt;/strong&gt;t &lt;strong&gt;P&lt;/strong&gt;rogramming) can be simple - data is combined by constructing lists, like &lt;code&gt;(list 1 2 3)&lt;/code&gt; / &lt;code&gt;(list 3 4 (list 9 7) 5)&lt;/code&gt;, you can implement pair, tree, etc. with lists.&lt;/p&gt;
&lt;p&gt;However, data within programs can&amp;rsquo;t directly flow between functions in this form, so we have abstraction layers:&lt;/p&gt;
&lt;img src=&#34;abstraction_barrier.png&#34; alt=&#34;abstraction barrier&#34; style=&#34;zoom:80%; box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;p&gt;Constructor (&lt;code&gt;make-rat&lt;/code&gt;) and selector (&lt;code&gt;denom&lt;/code&gt;, &lt;code&gt;numer&lt;/code&gt;) represent one level of abstraction from primitive data types to compound data, giving programs (functions above this abstraction layer, like &lt;code&gt;add-rat&lt;/code&gt; / &lt;code&gt;sub-rat&lt;/code&gt;) a higher perspective to view data. Data is no longer just scattered integers/floats, but &lt;code&gt;rat&lt;/code&gt; that can be constructed/extracted/analyzed. Functions above &lt;code&gt;add-rat&lt;/code&gt; / &lt;code&gt;sub-rat&lt;/code&gt; don&amp;rsquo;t need to care about rat&amp;rsquo;s implementation details, they just need to use operations like &lt;code&gt;add-rat&lt;/code&gt; to solve problems. The process of program construction is a process of raising abstraction levels.&lt;/p&gt;
&lt;h3 id=&#34;haskell-pattern-match&#34;&gt;&lt;a href=&#34;#haskell-pattern-match&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Haskell: Pattern Match
&lt;/h3&gt;&lt;!-- ÂÜôËøá Lisp ‰ºöÊõ¥ÊáÇ Haskell ÁöÑÂ•ΩÔºåÂ∞±ÂÉèÂÜôËøá C ÂèØ‰ª•Êõ¥Â•ΩÂú∞‰Ωì‰ºö Python ÂºÄÂèëÁöÑ‰æøÊç∑ÔºåËøôÈáåÂè™ÊòØËÄÉÈáèËØ≠Ê≥ïÁöÑÊòìÁî®ÊÄßÔºåÊ≤°ÊúâÂØπ‰∫éÊÄßËÉΩ/Â∫îÁî®Âú∫ÊôØÁ≠âÂÖ∂‰ªñÊñπÈù¢ÁöÑÊØîËæÉ. --&gt;
&lt;p&gt;In Haskell, how do we handle the issue of &lt;strong&gt;data construction and extraction&lt;/strong&gt;?&lt;/p&gt;
&lt;!-- &lt;span style=&#34;color: #888888; font-size: 0.85em;&#34;&gt;ÔºàÊûÑÈÄ†Â≠ê constructorÔºå ÊûÑÈÄ† compound data ÁöÑÂáΩÊï∞ÔºåÁ°ÆÂÆûÊòØÊúâËøô‰∏™ËØçÔºõÊèêÂèñÂ≠êÔºå‰∏çÁü•ÈÅìÊòØ‰∏çÊòØÊúâËøô‰∏™ËØçÔºåÊàëÁºñÁöÑÔºåÊÑèÊÄùÊòØÂ∞ÜÁªÑÊàêÁöÑ compound data ÁöÑÂ≠óÊÆµÊèêÂèñÂá∫Êù•Ôºå‰∏Ä‰∏™‰æãÂ≠êÊòØÂúÜÁÇπ/ÊàêÂëòËøêÁÆóÁ¨¶ `person.age` Ôºâ&lt;/span&gt; --&gt;
&lt;p&gt;&lt;strong&gt;Construction:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The syntax for declaring compound data is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This defines the &lt;code&gt;Point&lt;/code&gt; type with a constructor &lt;code&gt;Point Int Int&lt;/code&gt;, which can then be used to construct compound data of type &lt;code&gt;Point&lt;/code&gt;, like &lt;code&gt;p = Point 1 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extraction:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;Pattern Match&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;A simple example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getX&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;getX&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Point&lt;/span&gt; x &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notably: How you construct the compound data (&lt;code&gt;Point Int Int&lt;/code&gt;) is how you match it (&lt;code&gt;Point x _&lt;/code&gt;). That is‚Äî&lt;strong&gt;how you structure is how you destructure&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One advantage of this syntax is that you can &lt;strong&gt;parse function parameters&lt;/strong&gt; through Pattern Matching. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;HuffmanTree&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;...&lt;/span&gt;          &lt;span style=&#34;color:#57606a&#34;&gt;-- empty leaf list ‚Üí return empty tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;t&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;...&lt;/span&gt;         &lt;span style=&#34;color:#57606a&#34;&gt;-- only one leaf ‚Üí return tree with just root node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;constructHuffTree&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;y&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt;ts&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;...&lt;/span&gt;    &lt;span style=&#34;color:#57606a&#34;&gt;-- two or more leaves ‚Üí recursively build Huffman tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This demonstrates that: &lt;strong&gt;The way function parameters are destructured determines the function&amp;rsquo;s behavior.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, consider this problem: counting the number of nodes in a binary tree&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hs&#34; data-lang=&#34;hs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Empty&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; a &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;treeSize&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Tree&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;treeSize&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Empty&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;treeSize&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt; left right&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; treeSize left &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; treeSize right
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Empty tree constructed with &lt;code&gt;Empty&lt;/code&gt; constructor ‚Üí directly return &lt;code&gt;0&lt;/code&gt; (base case)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-empty tree constructed with &lt;code&gt;Node&lt;/code&gt; constructor ‚Üí solve recursively (recursive step)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How we construct data determines how we process it, and in Haskell, the form of constructing data matches the form of pattern matching on data, so we can do pattern matching in function parameter positions, with each pattern corresponding to a function behavior.&lt;/p&gt;
&lt;h3 id=&#34;lambda-calculus---pair-abstraction&#34;&gt;&lt;a href=&#34;#lambda-calculus---pair-abstraction&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Lambda Calculus - &lt;code&gt;pair&lt;/code&gt; abstraction
&lt;/h3&gt;&lt;h4 id=&#34;pair-abstraction-in-pure-lambda-calculus&#34;&gt;&lt;a href=&#34;#pair-abstraction-in-pure-lambda-calculus&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;&lt;code&gt;pair&lt;/code&gt; abstraction in Pure Lambda Calculus
&lt;/h4&gt;&lt;p&gt;‰∏äThe example mentioned in the &lt;a class=&#34;link&#34; href=&#34;#consistency&#34; &gt;Consistency&lt;/a&gt;section can be &lt;cite&gt;implemented in pure Lambda Calculus:&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;Ôºö&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pair = Œªm Œªn Œªb. b m n
pair v w = Œªb. b v w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This abstraction provides this perspective: through two applications of &lt;code&gt;pair&lt;/code&gt;, we instantiate &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, determining the elements contained in the pair, leaving &lt;code&gt;b&lt;/code&gt; as an interface for subsequent operations on the pair elements. To extract elements from the pair in order, we can define &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fst = Œªa Œªb. a
snd = Œªa Œªb. b

(pair v w) fst  ‚Üí v     // parentheses here can be omitted , according to left associativity convention
(pair v w) snd  ‚Üí w
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you prefer programming style like &lt;code&gt;fst (pair v w)&lt;/code&gt;, that&amp;rsquo;s also possible:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-block&#34; data-lang=&#34;block&#34;&gt;tru = Œªt Œªf. t      // Œ±-equivalent to `fst` defined in previous code block, we can understand the same abstraction differently
fls = Œªt Œªf. f      //          ...    `snd`    ...

fst = Œªp. p tru
snd = Œªp. p fls

fst (pair v w)  ‚Üí v 
snd (pair v w)  ‚Üí w 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s examine this abstraction again: &lt;code&gt;pair = Œªm Œªn Œªb. b m n&lt;/code&gt;. In Lambda Calculus, what we commonly call functions are termed abstractions, and this &lt;code&gt;pair&lt;/code&gt; abstraction provides an abstraction over the construction and operation of pairs. We first determine the contained elements through outer parameters &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; to build the pair, then use inner parameter &lt;code&gt;b&lt;/code&gt; to execute operations on the existing elements. From this perspective, pair naturally possesses the ability to interact with other functions (abstractions) within the Lambda Calculus system, because after instantiating the pair elements, it provides the interaction interface &lt;code&gt;b&lt;/code&gt;, waiting for other abstractions to interact with the pair&amp;rsquo;s existing elements through application.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Types and Programming Languages - Chapter 5 The Untyped Lambda-Calculus&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>Nested Mapping Examples Implemented in Haskell - SICP ¬ß 2.2.3  | List Monad </title>
        <link>http://fyshxfish.github.io/p/nested-mapping-examples-implemented-in-haskell-sicp-2.2.3-list-monad/</link>
        <pubDate>Thu, 29 Aug 2024 00:00:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/p/nested-mapping-examples-implemented-in-haskell-sicp-2.2.3-list-monad/</guid>
        <description>&lt;h2 id=&#34;problem-description&#34;&gt;&lt;a href=&#34;#problem-description&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Problem Description
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Given a positive integer $n$, find all ordered pairs of distinct positive integers $i$ and $j$, where $ 1 \leq i \leq j \leq n $, such that $ i + j $ is prime.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;implementation-in-haskell&#34;&gt;&lt;a href=&#34;#implementation-in-haskell&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Implementation in Haskell
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;isDivisible&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bool&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;isDivisible&lt;/span&gt; x y 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; mod x y &lt;span style=&#34;color:#0550ae&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;True&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; otherwise     &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;False&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;isPrime&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;isPrime&lt;/span&gt; x 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;True&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0550ae&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; not &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;foldr &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;||&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;map &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;isDivisible x&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;floor &lt;span style=&#34;color:#0550ae&#34;&gt;.&lt;/span&gt; sqrt &lt;span style=&#34;color:#0550ae&#34;&gt;.&lt;/span&gt; fromIntegral&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; x&lt;span style=&#34;color:#1f2328&#34;&gt;)]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;genPairs&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[((&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;genPairs&lt;/span&gt; n &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;do&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;..&lt;/span&gt;n&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#0550ae&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;y&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; x&lt;span style=&#34;color:#1f2328&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#0550ae&#34;&gt;+&lt;/span&gt; y&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;sumPrimePairs&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[((&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;sumPrimePairs&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;filter &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;,&lt;/span&gt; s&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;isPrime s&lt;span style=&#34;color:#1f2328&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;.&lt;/span&gt; genPairs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;about-list-monad-context-nested-lambda-and-do-notation&#34;&gt;&lt;a href=&#34;#about-list-monad-context-nested-lambda-and-do-notation&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;About List Monad: Context, Nested lambda and do-notation
&lt;/h2&gt;&lt;p&gt;Context of &lt;strong&gt;List Monad&lt;/strong&gt; : nondeterministic result.&lt;/p&gt;
&lt;!-- ‰ªäÂ§©ÂêÉÈ•≠ÂõûÊù•ÊÉ≥Âà∞ List Monad ÁöÑ Context ÂíåËøô‰∏™ÈóÆÈ¢òÁöÑ  --&gt;
&lt;!-- 
Title of this section is *Nested Mappings*, which represented in code with nested lambda,  do-notation in Haskell is the syntax sugar of nested lambda.  --&gt;
&lt;p&gt;The title of this section is &lt;em&gt;Nested Mappings&lt;/em&gt;, represented in code with nested lambdas. In Haskell, do notation is syntactic sugar for nested lambdas.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;flatMap&lt;/code&gt; defined in this chapter is actually Haskell &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; (bind) in Haskell.&lt;/p&gt;
&lt;!-- Êää SICP ‰∏≠ÁöÑ scheme ‰ª£Á†ÅÁî® Haskell ÈáçÂÜô‰∏ÄÈÅçÂ∫îËØ•‰πüÊå∫ÊúâÊÑè‰πâÁöÑ. --&gt;
&lt;!-- ‰ª•‰∏ÄÂ∑±‰πãÂäõÂèëËµ∑ RIIH ËøêÂä®, Rewrite it in Haskell! --&gt;
&lt;p&gt;For further details, consult &lt;a class=&#34;link&#34; href=&#34;https://learnyouahaskell.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn You a Haskell for Great Good&lt;/a&gt;: &lt;a class=&#34;link&#34; href=&#34;https://learnyouahaskell.github.io/a-fistful-of-monads.html#the-list-monad&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;A Fistful of Monads - the List Monad&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;another-example-the-list-monad-for-permutation&#34;&gt;&lt;a href=&#34;#another-example-the-list-monad-for-permutation&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Another Example: The List Monad for Permutation
&lt;/h2&gt;&lt;!-- 2024-08-30 Ë°•ÂÖÖÔºö SICP page 168 ÈõÜÂêàÂÖ®ÊéíÂàóÁöÑ Haskell ÂÆûÁé∞ --&gt;
&lt;p&gt;An intuitive way to understand this is that &lt;strong&gt;nondeterministic results&lt;/strong&gt; are well-suited for solving permutations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;permutations&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Eq&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;permutations&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;permutations&lt;/span&gt; xs &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;-&lt;/span&gt; xs 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    perm &lt;span style=&#34;color:#0550ae&#34;&gt;&amp;lt;-&lt;/span&gt; permutations &lt;span style=&#34;color:#0550ae&#34;&gt;$&lt;/span&gt; removeByElem x xs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#cf222e&#34;&gt;:&lt;/span&gt; perm&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;removeByElem&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;Eq&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;removeByElem&lt;/span&gt; x &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; filter &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;/=&lt;/span&gt; x&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- ‰ªé scheme ÂÆûÁé∞Ôºå Âà∞ Haskell `map + lambda` ÂÆûÁé∞ÔºåÂà∞ List Monad `do-notation` ÂÆûÁé∞Ôºå  --&gt;
</description>
        </item>
        <item>
        <title>Semantics of `let` in Scheme(feat. Semantics of `if`)</title>
        <link>http://fyshxfish.github.io/p/semantics-of-let-in-schemefeat.-semantics-of-if/</link>
        <pubDate>Thu, 29 Aug 2024 00:00:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/p/semantics-of-let-in-schemefeat.-semantics-of-if/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;semantics-of-let&#34;&gt;&lt;a href=&#34;#semantics-of-let&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Semantics of &lt;code&gt;let&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;&lt;mark&gt;Key point&lt;/mark&gt;: A &lt;code&gt;let&lt;/code&gt; scope is evaluated immediately (including both bindings and expressions after bindings, i.e., everything within the outer parentheses of the &lt;code&gt;let&lt;/code&gt;), even if the &lt;code&gt;let&lt;/code&gt; is nested inside an inner function that hasn&amp;rsquo;t been called yet.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;comp&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;display &lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;then-clause&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;display &lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;else-clause&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;#|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;    (define foo1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;        (let ((bar1 (/ 2 0)))    ; * evaluted immediately
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;            (display &amp;#34;should not be printed&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;|#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;foo2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;bar2&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;/ &lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)))&lt;/span&gt;    &lt;span style=&#34;color:#57606a&#34;&gt;; * evaluted immediately&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;newline&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;display &lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;let in `foo2`, bar2: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;display &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;bar2&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;foo1&lt;/code&gt;: We can see that the &lt;code&gt;let&lt;/code&gt; binding is evaluated, otherwise we wouldn&amp;rsquo;t get a division by zero exception.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;prompt&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;comp&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;else-clause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Division by zero signalled by /.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;To continue, call RESTART with an option number:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;snip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;foo2&lt;/code&gt;: We can see that the expressions after the &lt;code&gt;let&lt;/code&gt; binding are evaluated, otherwise we wouldn&amp;rsquo;t see the display output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;prompt&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;comp&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;then-clause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;foo2&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;`,&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;bar2:&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;/2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Unspecified return value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;semantics-of-if&#34;&gt;&lt;a href=&#34;#semantics-of-if&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Semantics of &lt;code&gt;if&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;The semantics of &lt;code&gt;if&lt;/code&gt;: It evaluates the condition &lt;strong&gt;first&lt;/strong&gt;, then decides whether to evaluate the then-clause or else-clause based on the result.&lt;/p&gt;
&lt;p&gt;A good reference for this is SICP (2nd Edition) Exercise 1.6, where an abstraction is used to define &lt;code&gt;new-if&lt;/code&gt; using &lt;code&gt;cond&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;new-if&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;predicate&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;then-clause&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;else-clause&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;cond &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;predicate&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;then-clause&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;else-clause&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The semantics of function application (applicative order evaluation) requires evaluating arguments &lt;strong&gt;first&lt;/strong&gt; (like then-clause and else-clause here) before applying the function. This is why you can&amp;rsquo;t write recursive expressions in then-clause or else-clause - they would be evaluated regardless of the predicate&amp;rsquo;s value, leading to infinite recursion. &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;cond&lt;/code&gt;/&amp;hellip; are &lt;strong&gt;special forms&lt;/strong&gt; with different semantics compared to abstractions defined through &lt;code&gt;define&lt;/code&gt;. I like the new-if example because it elegantly demonstrates Lisp&amp;rsquo;s metaprogramming features. Following the substitution model, predicate, then-clause, and else-clause can be replaced with any expressions you need, where expressions are enclosed in parentheses - the parentheses mark expression boundaries, and you can put parenthesized expressions in any parameter position (as long as they satisfy the implicit type constraints of the abstraction).&lt;/p&gt;
&lt;h2 id=&#34;an-error-caused-by-immediate-let-evaluation&#34;&gt;&lt;a href=&#34;#an-error-caused-by-immediate-let-evaluation&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;An Error Caused by Immediate &lt;code&gt;let&lt;/code&gt; Evaluation
&lt;/h2&gt;&lt;p&gt;Consider this prime number checking code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;prime?&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;or &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0550ae&#34;&gt;#t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#953800&#34;&gt;test_prime&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;divisible?&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;remainder &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;iter_biggest_divisor&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;cond &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;divisible?&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;iter_biggest_divisor&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;- &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;test_prime&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;biggest_divisor&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;iter_biggest_divisor&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;quotient &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#57606a&#34;&gt;; Notice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;display &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;biggest_divisor&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;if &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;biggest_divisor&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#0550ae&#34;&gt;#t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#0550ae&#34;&gt;#f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The results when running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;prompt&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;prime?&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;The object 0, passed as the second argument to integer-remainder, is not in the correct range.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;prompt&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;prime?&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Value: #t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to programmers&amp;rsquo; expectations, both &lt;code&gt;(prime? 1)&lt;/code&gt; and &lt;code&gt;(prime? 2)&lt;/code&gt; should directly return &lt;code&gt;#t&lt;/code&gt;, rather than the former throwing an error and the latter showing the behavior of &lt;code&gt;(display biggest_divisor)&lt;/code&gt;. As stated earlier, this occurs because the entire &lt;code&gt;let&lt;/code&gt; scope is evaluated immediately.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>mit-scheme Basic Usage</title>
        <link>http://fyshxfish.github.io/p/mit-scheme-basic-usage/</link>
        <pubDate>Sat, 24 Aug 2024 00:00:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/p/mit-scheme-basic-usage/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.
&lt;br&gt;&amp;ndash; Antoine de Saint-Exup√©ry&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;installing-mit-scheme-via-package-manager&#34;&gt;&lt;a href=&#34;#installing-mit-scheme-via-package-manager&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Installing MIT-Scheme via Package Manager
&lt;/h2&gt;&lt;p&gt;MacOS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install mit-scheme
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ubuntu:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install mit-scheme
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;basic-repl-usage&#34;&gt;&lt;a href=&#34;#basic-repl-usage&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Basic REPL Usage
&lt;/h2&gt;&lt;p&gt;ÔºàREPL: &lt;strong&gt;R&lt;/strong&gt;ead-&lt;strong&gt;E&lt;/strong&gt;valuate-&lt;strong&gt;P&lt;/strong&gt;rint &lt;strong&gt;L&lt;/strong&gt;oopÔºâ&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start the REPL with a single command &lt;code&gt;mit-scheme&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load Scheme code into the REPL:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 ] =&amp;gt; (load &amp;#34;path/to/file.scm&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(The .scm extension can be omitted.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View the manual:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;man mit-scheme&lt;/code&gt; command in the &lt;strong&gt;terminal&lt;/strong&gt; to view the brief mit-scheme CLI manual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When in REPL, press Ctrl-C and then type H to see the interrupt manual:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ctrl-C: Waits for the next keyboard input to decide the interrupt behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl-G: Returns to the top-level REPL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl-Z: Suspends the current mit-scheme process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press Ctrl-C and then type ? to see the manual for the next key input (option) and how it corresponds to REPL behavior (clear screen, suspend, exit, ignore interrupts, etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- 4. You don&#39;t have to RESTART if enter an illegal statement in REPL.  
    
    You can keep going despite the error. --&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;If the REPL doesn&amp;rsquo;t respond:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check if parentheses are properly matched;  &lt;span style=&#34;color:red&#34;&gt;( &lt;/span&gt;( ) ( ( ) )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After interrupting with Ctrl-C, the prompt (&lt;code&gt;1 ] =&amp;gt; / 2 error&amp;gt;&lt;/code&gt;) may not reappear, which results in the &amp;ldquo;frozen&amp;rdquo; REPL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Worried about deep recursion? If the recursion depth exceeds the limit, the REPL will show &lt;em&gt;Recursion depth limit exceeded. Aborting!&lt;/em&gt;. (According to mit-scheme manual, which you can get by &lt;code&gt;man mit-scheme&lt;/code&gt;, stack size can be specified with CLI parameters, meaning MIT-Scheme has limited stack resources.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;ScHeMe&lt;/del&gt; Scheme is case-&lt;strong&gt;insensitive&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;(LoAd &amp;quot;path/to/file.scm&amp;quot;)&lt;/code&gt;/&lt;code&gt;(DEFINE x 1)&lt;/code&gt;/&lt;code&gt;(define x 1)&lt;/code&gt;/&lt;code&gt;(defiNE x 1)&lt;/code&gt;, etc. won&amp;rsquo;t cause errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;History variable (procedure): Reuse procedures returned after evaluating expressions in the REPL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;average-dump&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;square&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Value: #[compound-procedure 12]    ; Can be reused in subsequent expressions, similar to GDB&amp;#39;s history variable `$1`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;compound-procedure&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#57606a&#34;&gt;; Not very convenient to use directly, but it works&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Value: 55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;newfunc&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;compound-procedure&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;])&lt;/span&gt;   &lt;span style=&#34;color:#57606a&#34;&gt;; Can be bound to a new identifier for reuse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Value: newfunc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#1f2328&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;newfunc&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#57606a&#34;&gt;;Value: 55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;afterword&#34;&gt;&lt;a href=&#34;#afterword&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Afterword
&lt;/h2&gt;&lt;p&gt;This Scheme REPL is &lt;strong&gt;quite&lt;/strong&gt; basic. It doesn‚Äôt support history backtracking or cursor movement, however, since I don&amp;rsquo;t need it for anything too complex, it&amp;rsquo;s good enough for me.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
