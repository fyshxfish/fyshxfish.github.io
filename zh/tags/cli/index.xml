<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CLI on fyshXplore</title>
        <link>http://localhost:1313/zh/tags/cli/</link>
        <description>Recent content in CLI on fyshXplore</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Wed, 03 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/zh/tags/cli/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>简单的 Bash CLI 程序 &amp; 简单的元编程</title>
        <link>http://localhost:1313/zh/p/%E7%AE%80%E5%8D%95%E7%9A%84-bash-cli-%E7%A8%8B%E5%BA%8F-%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%83%E7%BC%96%E7%A8%8B/</link>
        <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/zh/p/%E7%AE%80%E5%8D%95%E7%9A%84-bash-cli-%E7%A8%8B%E5%BA%8F-%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
        <description>&lt;h2 id=&#34;简单的前言&#34;&gt;&lt;a href=&#34;#%e7%ae%80%e5%8d%95%e7%9a%84%e5%89%8d%e8%a8%80&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;简单的前言
&lt;/h2&gt;&lt;p&gt;虽然这里的日期是 2024-04-03，但是我写这篇博客的时候其实是 2025-02-18，写 2025-02-17 那篇博客的时候，提到 polyglot 相关的内容，这部分内容其实是上上个学期的计算机系统的讨论课的产出，于是想着把沉睡在 &amp;hellip;/Downloads，&amp;hellip;/Courses/CS24Spring，小组群文件等目录里的讨论课材料里有点意思的部分翻出来晾晾，所以这一页博客出现在你的眼前.&lt;/p&gt;
&lt;p&gt;我看到相当多的说法说 bash 的语法很不舒服，然而我在接触到这种说法之前，已然习惯了 bash 的语法，“我比流言蜚语先认识你”??😶‍🌫️&lt;/p&gt;
&lt;!-- 我的惯用 shell 还得是 fish，首先它的名字和我的名字很相称，这当然不是最重要的原因！fish 的高亮颜色很漂亮，补全也不错（听说 zsh 也很好，不过没有认真用过，上一次用还是在试图安装 arch 的时候，我现在已经懒得折腾需要配置的一切了）， --&gt;
&lt;p&gt;这篇博客相关的讨论课的题目是——对于 C 中的 &lt;code&gt;switch-case&lt;/code&gt;，编译器的行为如何，即 &lt;code&gt;case&lt;/code&gt; 呈现什么样的分布（连续/不连续，间隔大小）时，编译器将生成跳转表. 既然要探讨不同 &lt;code&gt;case&lt;/code&gt; 对应的情形，那么首先要生成不同 &lt;code&gt;case&lt;/code&gt; 对应的 C 源文件，这个事情疑似有点机械了，那么考虑用自动化的脚本去完成. 我们对这个脚本的预期是 &lt;code&gt;generator -b 10 -s 2 -d dest_dir -f file_name&lt;/code&gt; 将产生分支数量（&lt;code&gt;-b&lt;/code&gt;）为 10，分支间隔（&lt;code&gt;-s&lt;/code&gt;）为 2，存放目录（&lt;code&gt;-d&lt;/code&gt;）为 dest_dir，文件名（&lt;code&gt;-f&lt;/code&gt;）为 file_name.c，有了单个文件的生成器，我们可以再写一个生成器来调用这个生成器，形成一批分支数量 / 分支间隔不同的 C 源文件.&lt;/p&gt;
&lt;h2 id=&#34;命令行参数捕捉&#34;&gt;&lt;a href=&#34;#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0%e6%8d%95%e6%8d%89&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;命令行参数捕捉
&lt;/h2&gt;&lt;p&gt;命令行最显而易见的好处在于，你可以通过选项来控制命令的具体行为，比如 &lt;code&gt;cat&lt;/code&gt; 会为你呈现文件内容，而 &lt;code&gt;cat -n&lt;/code&gt; 可以帮你在文件内容旁边打上行号，那么如何捕捉命令行参数——&lt;code&gt;getopts&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#6639ba&#34;&gt;getopts&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;:b:d:f:s:&amp;#34;&lt;/span&gt; opt&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#cf222e&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;$opt&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b&lt;span style=&#34;color:#0550ae&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#953800&#34;&gt;branch&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$OPTARG&lt;/span&gt;      &lt;span style=&#34;color:#57606a&#34;&gt;# number of switch branches&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#1f2328&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :&lt;span style=&#34;color:#0550ae&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6639ba&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Option -&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$OPTARG&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt; requires an argument.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#1f2328&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ?&lt;span style=&#34;color:#0550ae&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6639ba&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;Invalid option: -&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$OPTARG&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#1f2328&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#cf222e&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;最简单的元编程&#34;&gt;&lt;a href=&#34;#%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e5%85%83%e7%bc%96%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;最简单的元编程
&lt;/h2&gt;&lt;p&gt;这里的元编程指用代码生成代码，它可以很复杂，然而这里只采取一种最简单的观点——代码，不就是文本文件吗？所以，把代码文本 &lt;code&gt;echo&lt;/code&gt; 追加写入到目标文件里去即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#953800&#34;&gt;targetpath&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;./&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;dir&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;/* Created by switch_generator */\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;targetpath&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;     &lt;span style=&#34;color:#57606a&#34;&gt;# sleep 0.1 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#0a3069&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;int main(){\n\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;    int i = 0, j = 0;\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;    switch (i) {\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;targetpath&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#57606a&#34;&gt;# sleep 0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;((&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;i &amp;lt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;$branch&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; i++ &lt;span style=&#34;color:#0550ae&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#cf222e&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#953800&#34;&gt;record&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#953800&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;$((&lt;/span&gt; i*seperate &lt;span style=&#34;color:#cf222e&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6639ba&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#0a3069&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;    case &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;:\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;        j += &lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$i&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;;\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;        break;\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;targetpath&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#57606a&#34;&gt;# sleep 0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#953800&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;$record&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6639ba&#34;&gt;echo&lt;/span&gt; -e &lt;span style=&#34;color:#0a3069&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;    default:\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;        j += 1000;\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;        break;\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;    }\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;    return 0;\n\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;targetpath&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;源文件流水线&#34;&gt;&lt;a href=&#34;#%e6%ba%90%e6%96%87%e4%bb%b6%e6%b5%81%e6%b0%b4%e7%ba%bf&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;源文件流水线
&lt;/h2&gt;&lt;p&gt;提升抽象的层次，用另一个脚本调用上面的脚本，实现源文件的批量生产，核心代码是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;((&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;branch_num&lt;/span&gt; &lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; branch_num &amp;lt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#953800&#34;&gt;$size&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt; branch_num++ &lt;span style=&#34;color:#0550ae&#34;&gt;))&lt;/span&gt;&lt;span style=&#34;color:#1f2328&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#953800&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#0550ae&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;compiler&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;_branch_&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;branch_num&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;&amp;#34;&lt;/span&gt;                             
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bash ./switch_generator.sh  -b &lt;span style=&#34;color:#953800&#34;&gt;$branch_num&lt;/span&gt; -d &lt;span style=&#34;color:#953800&#34;&gt;$dir&lt;/span&gt; -f &lt;span style=&#34;color:#0a3069&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#953800&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#0a3069&#34;&gt;}&lt;/span&gt;.c 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#57606a&#34;&gt;# $compiler -S ./${dir}/${filename}.c -o ./${dir}/${filename}.s    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#57606a&#34;&gt;# ...       &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cf222e&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把这一堆文件批量编译到汇编，再用 &lt;code&gt;grep&lt;/code&gt; 检查是否存在跳转表并报告，我们的任务就完成了，道理差不多，这里不再赘述，如果你好奇讨论题的答案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当连续分支数量 &amp;gt;= 4(clang) / 5(gcc) 时，编译器将使用跳转表，否则使用 subl, je 条件跳转；&lt;/li&gt;
&lt;li&gt;当分支常量间隔 &amp;gt;= 12(clang) / 10(gcc) 时，编译器不再采用跳转表，而是直接用 subl, je 进行条件判断与跳转；&lt;/li&gt;
&lt;li&gt;当分支变量为两段连续，但两段之间有较大间隔，如这里的 &lt;span style=&#34;color:rgb(64, 145, 252);&#34;&gt;1,2,&amp;hellip;,6,&lt;/span&gt; &lt;span style=&#34;color:rgb(254, 72, 151);&#34;&gt;101,102,&amp;hellip;106&lt;/span&gt;，gcc 将生成两张跳转表. （此结论来自我的队友 LYT 同学）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>简单看看 `file` 命令</title>
        <link>http://localhost:1313/zh/p/%E7%AE%80%E5%8D%95%E7%9C%8B%E7%9C%8B-file-%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Wed, 20 Mar 2024 20:50:00 +0800</pubDate>
        
        <guid>http://localhost:1313/zh/p/%E7%AE%80%E5%8D%95%E7%9C%8B%E7%9C%8B-file-%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h2 id=&#34;简单的前言&#34;&gt;&lt;a href=&#34;#%e7%ae%80%e5%8d%95%e7%9a%84%e5%89%8d%e8%a8%80&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;简单的前言
&lt;/h2&gt;&lt;p&gt;虽然这里的日期是 2024-03-20，但是我写这篇博客的时候其实是 2025-02-18，来自我的计算机系统的讨论课材料. 如果你想知道一个文件的类型，那么你可能会用到 &lt;code&gt;file&lt;/code&gt; 这个命令，&lt;code&gt;file&lt;/code&gt; 会告诉你这个文件的类型，那么 &lt;code&gt;file&lt;/code&gt; 是如何知道文件的类型的，或者说，系统中的文件如何告诉 &lt;code&gt;file&lt;/code&gt;（或者任意一个想知道其类型的程序）自己的类型，文件把类型的信息放在哪里？&lt;/p&gt;
&lt;h2 id=&#34;阅读手册&#34;&gt;&lt;a href=&#34;#%e9%98%85%e8%af%bb%e6%89%8b%e5%86%8c&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;阅读手册
&lt;/h2&gt;&lt;p&gt;了解一个命令的第一&lt;span style=&#34;font-size: smaller;&#34;&gt;二&lt;/span&gt;&lt;span style=&#34;font-size: x-small;&#34;&gt;三&lt;/span&gt;个手段一般是 &lt;code&gt;whatis&lt;/code&gt; / &lt;code&gt;man&lt;/code&gt; / &lt;code&gt;tldr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;man whatis&lt;/code&gt; 会告诉你，&lt;code&gt;whatis&lt;/code&gt; 其实就来自 &lt;code&gt;man&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each  manual page has a short description available within it.  &lt;strong&gt;whatis&lt;/strong&gt; searches the manual page names and displays the manual page descriptions of any name matched.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;man file&lt;/code&gt; 会告诉你，&lt;code&gt;file&lt;/code&gt; 这样检查文件的类型：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;file&lt;/strong&gt; tests each argument in an attempt to classify it.  There are three sets of tests, performed in this order: filesystem tests, magic tests, and language tests.  The first test that succeeds causes the file type to be printed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;filesystem tests
&lt;br&gt;系统调用 stat, 根据其返回值判断文件的类型；stat 可以判断文件为空/文件类型是&amp;lt;sys/stat.h&amp;gt;中已定义的类型.&lt;/li&gt;
&lt;li&gt;magic tests
&lt;br&gt;检查文件头是否含有特定的 magic bytes. 例如，如果该文件的前五个字节对应的 ASCII 字符是&amp;quot;%PDF-&amp;quot;，则判断为PDF文件. 若不存在任何 magic bytes, 则判断为文本文件，&lt;code&gt;file&lt;/code&gt; 将继续判断其编码方式为 ASCII/UTF-8/…&lt;/li&gt;
&lt;li&gt;language tests
&lt;br&gt;通过关键字判断文件的语言，如从 main, struct, printf 推测该文本文件为 C 源文件.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;近距离观察这个命令的执行流程的方式是 &lt;code&gt;strace file foo.bar&lt;/code&gt;；你也可以把输出放到重定向到文件里，然后用 &lt;code&gt;vim&lt;/code&gt; 查看它，以便进行关键字检索，如 &lt;code&gt;strace file foo.bar &amp;amp;&amp;gt; strace.out; vim strace.out&lt;/code&gt; &amp;ndash;&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;欺骗-file&#34;&gt;&lt;a href=&#34;#%e6%ac%ba%e9%aa%97-file&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;欺骗 &lt;code&gt;file&lt;/code&gt;
&lt;/h2&gt;&lt;h3 id=&#34;从-magic-test-入手&#34;&gt;&lt;a href=&#34;#%e4%bb%8e-magic-test-%e5%85%a5%e6%89%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;从 magic test 入手
&lt;/h3&gt;&lt;img src=&#34;magic_pdf.png&#34; alt=&#34;fake pdf&#34; style=&#34;zoom:80%;box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;h3 id=&#34;从-language-test-入手&#34;&gt;&lt;a href=&#34;#%e4%bb%8e-language-test-%e5%85%a5%e6%89%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;从 language test 入手
&lt;/h3&gt;&lt;img src=&#34;confusing_c.png&#34; alt=&#34;C source file?&#34; style=&#34;zoom:80%;box-shadow: 2px 2px 3px rgba(155, 171, 187,0.7);&#34; /&gt;
&lt;h2 id=&#34;简单的结语&#34;&gt;&lt;a href=&#34;#%e7%ae%80%e5%8d%95%e7%9a%84%e7%bb%93%e8%af%ad&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;简单的结语
&lt;/h2&gt;&lt;p&gt;回答最开始的问题——&lt;code&gt;file&lt;/code&gt; 通过 filesystem tests, magic tests, and language tests 得知文件的类型，文件通过文件头中的 magic byte / 文本编码 / 程序语言关键字来表达自己的类型.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
