<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>PL on fyshXplore</title>
        <link>http://fyshxfish.github.io/zh/categories/pl/</link>
        <description>Recent content in PL on fyshXplore</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Thu, 29 May 2025 18:06:00 +0800</lastBuildDate><atom:link href="http://fyshxfish.github.io/zh/categories/pl/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Foundations and Applications of Intersection and Union Types (PDF)</title>
        <link>http://fyshxfish.github.io/zh/p/foundations-and-applications-of-intersection-and-union-types-pdf/</link>
        <pubDate>Thu, 29 May 2025 18:06:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/zh/p/foundations-and-applications-of-intersection-and-union-types-pdf/</guid>
        <description>&lt;iframe src=&#34;http://fyshxfish.github.io/pdfs/Foundations_and_Applications_of_Intersection_and_Union_Types.pdf&#34; width=&#34;100%&#34; height=&#34;750px&#34;&gt;
  你的浏览器不支持内嵌 PDF 文件，请&lt;a href=&#34;http://fyshxfish.github.io/pdfs/Foundations_and_Applications_of_Intersection_and_Union_Types.pdf&#34;&gt;点击这里下载&lt;/a&gt;
&lt;/iframe&gt;
</description>
        </item>
        <item>
        <title>语言的安全与抽象</title>
        <link>http://fyshxfish.github.io/zh/p/%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8E%E6%8A%BD%E8%B1%A1/</link>
        <pubDate>Tue, 10 Sep 2024 14:10:00 +0800</pubDate>
        
        <guid>http://fyshxfish.github.io/zh/p/%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8E%E6%8A%BD%E8%B1%A1/</guid>
        <description>&lt;p&gt;来自 &lt;em&gt;Types and Programming Languages § 1.2 What Type Systems Are Good For&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A safe language is one that protects its own &lt;strong&gt;abstractions&lt;/strong&gt;.
&lt;br&gt;A safe language is completely defined by its programmer&amp;rsquo;s manual.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;完备的&lt;strong&gt;抽象&lt;/strong&gt;意味着使用者可以完全信赖语言设计，&lt;strong&gt;只&lt;/strong&gt;关心高级语言这一抽象层，而无需关心硬件层的具体实现.&lt;/p&gt;
&lt;p&gt;高级语言提供对物理设备的抽象，比如，数组是对于内存的抽象，程序员对于数组的预期是：数组&lt;strong&gt;只能&lt;/strong&gt;通过&lt;strong&gt;显式&lt;/strong&gt;的更新操作（如 &lt;code&gt;arr[1] = 1024&lt;/code&gt; ）修改，&amp;ldquo;修改了某个变量，某个数组中的若干元素也莫名其妙地改变了&amp;rdquo;（e.g. 缓冲区溢出攻击）是抽象被破坏的一种表现，这意味着程序员必须对&lt;strong&gt;变量&lt;/strong&gt;（高级语言提供的抽象）在&lt;strong&gt;内存&lt;/strong&gt;（真实存在的物理设备）中的布局有详细了解，才能写出符合预期的程序.&lt;/p&gt;
&lt;p&gt;想起了 CSAPP 的一系列实验，因为 CSAPP 的目标是从程序员的角度考察计算机系统，即从软件视角看硬件，如果使用的编程语言是安全的，那么我们可以完全相信它提供的抽象，那么我们就不能透过软件看到硬件，如果 c 是安全的，那么 CSAPP 的实验就没法做了🧐&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
